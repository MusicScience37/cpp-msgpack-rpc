@startuml client

interface IParameterSerializer {
    + serialize_to(packer: Packer)
}

class ParameterSerializer<Args...> {
}
IParameterSerializer <|.. ParameterSerializer

class CallResult {
    + is_success() : bool
    + as<T>() : T
    + error() : Error
}

interface IClientImpl {
    {abstract} + call(name: string, params: IParameterSerializer&) : Result
    {abstract} + async_call(name: string, params: IParameterSerializer&, on_result: Function<void(Result)>)
    {abstract} + notify(name: string, params: IParameterSerializer&)
    {abstract} + async_notify(name: string, params: IParameterSerializer&, on_result: Function<void(Error)>)
}
IClientImpl ..> IParameterSerializer
IClientImpl ..> CallResult

class Client {
    + call<Result, Args...>(name: string, args...: Args...)
    + async_call<OnResultFunction, Args...>(on_result: OnResultFunction, name: string, args...: Args...)
    + notify<Args...>(name: string, args...: Args...)
    + async_notify<OnResultFunction, Args...>(on_result: OnResultFunction, name: string, args...: Args...)
}
Client o-- IClientImpl

@enduml
