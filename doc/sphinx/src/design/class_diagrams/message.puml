@startuml messages

enum MessageType {
    REQUEST
    RESPONSE
    NOTIFICATION
}

class MessageID
note bottom: Alias of uint32_t.

class MessageSerializer {
    + serializer_send_request<Params...>(name: string, request_id: MessageID, params...: Params...) : Bytes
    + serializer_send_success_response<T>(request_id: MessageID, result: T) : Bytes
    + serializer_send_error_response<T>(request_id: MessageID, error: T) : Bytes
    + serializer_send_notification<Params...>(name: string, params...: Params...) : Bytes
}
MessageSerializer ..> MessageID

!startsub ParsedMessage
class ParsedMessage {
    + type() : MessageType
    + name() : string
    + id() : MessageID
    + params_as<T...>() : tuple<T...>
}
!endsub
ParsedMessage ..> MessageType
ParsedMessage ..> MessageID

!startsub MessageParser
class MessageParser {
    + prepare_buffer() : BytesView
    + consumed(num_bytes: size_t)
    + try_parse() : optional<ParsedMessage>
}
!endsub
MessageParser ..> ParsedMessage

@enduml
