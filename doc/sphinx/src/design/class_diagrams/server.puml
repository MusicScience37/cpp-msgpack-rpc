@startuml server

!includesub transport.puml!IAcceptor
!includesub transport.puml!IConnection
IAcceptor ..> IConnection

class ServerSession {
    + async_response_success<T>(request_id: MessageID, result: T)
    + async_response_error<T>(request_id: MessageID, error: T)
    + async_notify<T>(name: string, params...: Params...)
}
ServerSession o-- IConnection

interface IMethod {
    {abstract} + name() : string
    {abstract} + call(request: ParsedMessage, session: ServerSession)
    {abstract} + notify(request: ParsedMessage, session: ServerSession)
}
IMethod ..> ServerSession

interface IMethodDict {
    {abstract} + get(name: string) : IMethod&
}
IMethodDict ..> IMethod

interface IMethodProcessor {
    {abstract} + call(method_name: string, request: ParsedMessage, session: ServerSession)
    {abstract} + notify(method_name: string, request: ParsedMessage, session: ServerSession)
}
IMethodProcessor ..> IMethodDict

class Server {
    + start()
    + stop()
}
Server o-- IMethodProcessor
Server o-- IAcceptor

class ServerBuilder {
    + listen_to_tcp(host: string, port: uint32_t)
    + add_method<Signature, Function>(name: string, function: Function)
    + build() : Server
}
ServerBuilder ..> Server

@enduml
